
origamiLamp2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000653  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001eb  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__vector_2>
   6:	ad c0       	rjmp	.+346    	; 0x162 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	be c0       	rjmp	.+380    	; 0x18e <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 e0       	ldi	r30, 0x00	; 0
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	7b d0       	rcall	.+246    	; 0x13a <main>
  44:	db c0       	rjmp	.+438    	; 0x1fc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <_Z5setupv>:

volatile uint8_t toRampUp = 0;		//This variable is checked for performing light ramping

void inline setup()
{
	cli();
  48:	f8 94       	cli
	
	DDRB = 0x00;
  4a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
  4c:	18 ba       	out	0x18, r1	; 24
	//DDRB &= ~((1 << PINB1) || (1 << PINB2));						//I/O inputs
	DDRB |= 1 << PINB0;												//I/O outputs
  4e:	b8 9a       	sbi	0x17, 0	; 23
	PORTB |= 1 << PINB1;											//PULL UP RESISTOR for input
  50:	c1 9a       	sbi	0x18, 1	; 24
	
	TCCR0A |=  (1 << WGM01) | (1 << WGM00);							//Waveform Generation Mode... for pin mode PWM ---> |(1 << COM0A1)
  52:	8f b5       	in	r24, 0x2f	; 47
  54:	83 60       	ori	r24, 0x03	; 3
  56:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= (1 << CS01) | (1 << CS00);							//Timer clock
  58:	83 b7       	in	r24, 0x33	; 51
  5a:	83 60       	ori	r24, 0x03	; 3
  5c:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= 1 << TOIE0;											//Timer0 overflow interrupt
  5e:	89 b7       	in	r24, 0x39	; 57
  60:	82 60       	ori	r24, 0x02	; 2
  62:	89 bf       	out	0x39, r24	; 57
	
	MCUCR |= (1 << SM1) | (1 << SE);								//Sleep mode selection
  64:	85 b7       	in	r24, 0x35	; 53
  66:	80 63       	ori	r24, 0x30	; 48
  68:	85 bf       	out	0x35, r24	; 53
	PCMSK |= (1 << PCINT1);											//Pin change mask
  6a:	a9 9a       	sbi	0x15, 1	; 21
	
	MCUSR = 0;														//Watchdog settings
  6c:	14 be       	out	0x34, r1	; 52
	WDTCR = (1<<WDCE)|(1<<WDE);
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	81 bd       	out	0x21, r24	; 33
	WDTCR = (1<<WDTIE) | (1<<WDP3) | (1<<WDP0);
  72:	81 e6       	ldi	r24, 0x61	; 97
  74:	81 bd       	out	0x21, r24	; 33
	
	sei();
  76:	78 94       	sei
  78:	08 95       	ret

0000007a <_Z5sePCIv>:
}

void sePCI()					//Enable pin change interrupt to look for movement of tilt sensor
{
	GIFR |= 1 << PCIF;			//Clears pin change interrupt flag
  7a:	8a b7       	in	r24, 0x3a	; 58
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	8a bf       	out	0x3a, r24	; 58
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8b bf       	out	0x3b, r24	; 59
  86:	08 95       	ret

00000088 <_Z6rampUPv>:
	GIMSK &= ~(1 << PCIE);		//Clear pin change interrupt enable bit
}

void rampUP()						//Dims the light up
{
	TCCR0A |= (1 << COM0A1);		//Sets PINB0 to PWM mode
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	8f bd       	out	0x2f, r24	; 47
	while(OCR0A < 0xff)
  8e:	86 b7       	in	r24, 0x36	; 54
  90:	8f 3f       	cpi	r24, 0xFF	; 255
  92:	61 f0       	breq	.+24     	; 0xac <__stack+0xd>
	{
		OCR0A++;					//Increments PWM
  94:	86 b7       	in	r24, 0x36	; 54
  96:	8f 5f       	subi	r24, 0xFF	; 255
  98:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e5       	ldi	r24, 0x5F	; 95
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z6rampUPv+0x16>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <__stack+0x5>
  a4:	00 00       	nop
}

void rampUP()						//Dims the light up
{
	TCCR0A |= (1 << COM0A1);		//Sets PINB0 to PWM mode
	while(OCR0A < 0xff)
  a6:	86 b7       	in	r24, 0x36	; 54
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	a1 f7       	brne	.-24     	; 0x94 <_Z6rampUPv+0xc>
	{
		OCR0A++;					//Increments PWM
		_delay_ms(8);				//Pauses for 8ms each time
	}
	sePCI();						//enable 
  ac:	e6 df       	rcall	.-52     	; 0x7a <_Z5sePCIv>
  ae:	08 95       	ret

000000b0 <_Z5pauseh>:
}

void pause(uint8_t sec)		//interruptible pause in seconds, returns if device shaken
{
	uint16_t i = sec*50;
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	9c 01       	movw	r18, r24
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	82 0f       	add	r24, r18
  be:	93 1f       	adc	r25, r19
  c0:	9c 01       	movw	r18, r24
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	82 0f       	add	r24, r18
  cc:	93 1f       	adc	r25, r19
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
	while((i > 0) && !toRampUp)
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	61 f0       	breq	.+24     	; 0xee <_Z5pauseh+0x3e>
  d6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <toRampUp>
  da:	21 11       	cpse	r18, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <_Z5pauseh+0x3e>
	{
		i--;
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	ef e6       	ldi	r30, 0x6F	; 111
  e2:	f7 e1       	ldi	r31, 0x17	; 23
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z5pauseh+0x34>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z5pauseh+0x3a>
  ea:	00 00       	nop
  ec:	f2 cf       	rjmp	.-28     	; 0xd2 <_Z5pauseh+0x22>
  ee:	08 95       	ret

000000f0 <_Z8rampDOWNv>:
		_delay_ms(20);
	}
}

void rampDOWN()				//Dims the light down 128 PWM steps, returns if device shaken
{
  f0:	9b e9       	ldi	r25, 0x9B	; 155
	uint8_t i = 0;
	while ((i < 155) && !toRampUp &&(OCR0A > 0) )
  f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <toRampUp>
  f6:	81 11       	cpse	r24, r1
  f8:	13 c0       	rjmp	.+38     	; 0x120 <_Z8rampDOWNv+0x30>
  fa:	86 b7       	in	r24, 0x36	; 54
  fc:	81 11       	cpse	r24, r1
  fe:	05 c0       	rjmp	.+10     	; 0x10a <_Z8rampDOWNv+0x1a>
 100:	0f c0       	rjmp	.+30     	; 0x120 <_Z8rampDOWNv+0x30>
	{
		i++;
		OCR0A--;								//Decrements PWM
		_delay_ms(36);							//Pauses for 36ms each time
	}
	if (OCR0A == 0) TCCR0A &= ~(1 << COM0A1);	//Sets PINB0 to normal output mode effectively turning off the light completely, pulling gate to low
 102:	8f b5       	in	r24, 0x2f	; 47
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	8f bd       	out	0x2f, r24	; 47
}
 108:	08 95       	ret
{
	uint8_t i = 0;
	while ((i < 155) && !toRampUp &&(OCR0A > 0) )
	{
		i++;
		OCR0A--;								//Decrements PWM
 10a:	86 b7       	in	r24, 0x36	; 54
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	86 bf       	out	0x36, r24	; 54
 110:	ef e2       	ldi	r30, 0x2F	; 47
 112:	fa e2       	ldi	r31, 0x2A	; 42
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <_Z8rampDOWNv+0x24>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_Z8rampDOWNv+0x2a>
 11a:	00 00       	nop
 11c:	91 50       	subi	r25, 0x01	; 1
}

void rampDOWN()				//Dims the light down 128 PWM steps, returns if device shaken
{
	uint8_t i = 0;
	while ((i < 155) && !toRampUp &&(OCR0A > 0) )
 11e:	49 f7       	brne	.-46     	; 0xf2 <_Z8rampDOWNv+0x2>
	{
		i++;
		OCR0A--;								//Decrements PWM
		_delay_ms(36);							//Pauses for 36ms each time
	}
	if (OCR0A == 0) TCCR0A &= ~(1 << COM0A1);	//Sets PINB0 to normal output mode effectively turning off the light completely, pulling gate to low
 120:	86 b7       	in	r24, 0x36	; 54
 122:	88 23       	and	r24, r24
 124:	71 f3       	breq	.-36     	; 0x102 <_Z8rampDOWNv+0x12>
 126:	08 95       	ret

00000128 <_Z5sleepv>:
}

void sleep()
{
	sePCI();					//Enable pin change interrupt for awakening by reading tile sensor
 128:	a8 df       	rcall	.-176    	; 0x7a <_Z5sePCIv>
	sleep_mode();
 12a:	85 b7       	in	r24, 0x35	; 53
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	85 bf       	out	0x35, r24	; 53
 130:	88 95       	sleep
 132:	85 b7       	in	r24, 0x35	; 53
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	85 bf       	out	0x35, r24	; 53
 138:	08 95       	ret

0000013a <main>:
}

int main(void)
{
	setup();					//Setting up registers
 13a:	86 df       	rcall	.-244    	; 0x48 <_Z5setupv>
    while (1)
    {
		if (toRampUp==1)
 13c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <toRampUp>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	51 f4       	brne	.+20     	; 0x158 <main+0x1e>
		{
			rampUP();
 144:	a1 df       	rcall	.-190    	; 0x88 <_Z6rampUPv>
			toRampUp = 0;
 146:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <toRampUp>
			pause(4);
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	b1 df       	rcall	.-158    	; 0xb0 <_Z5pauseh>
			rampDOWN();
 14e:	d0 df       	rcall	.-96     	; 0xf0 <_Z8rampDOWNv>
			pause(10);
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	ae df       	rcall	.-164    	; 0xb0 <_Z5pauseh>
			rampDOWN();
 154:	cd df       	rcall	.-102    	; 0xf0 <_Z8rampDOWNv>
 156:	f2 cf       	rjmp	.-28     	; 0x13c <main+0x2>
		}
		else if (OCR0A==0)
 158:	86 b7       	in	r24, 0x36	; 54
 15a:	81 11       	cpse	r24, r1
 15c:	ef cf       	rjmp	.-34     	; 0x13c <main+0x2>
		{
			sleep();
 15e:	e4 df       	rcall	.-56     	; 0x128 <_Z5sleepv>
 160:	ed cf       	rjmp	.-38     	; 0x13c <main+0x2>

00000162 <__vector_3>:
		}
    }
}

ISR (TIM0_OVF_vect)							//Timer 0 overflow interrupt used for all the timing needs. The prescalre is set to CLOCK/256. This ISR is called approximately 122 times a second
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
	static uint8_t smallTimer = 0;			//The small timer is incremented 122 times to make up one second
	
	smallTimer++;
 16e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 172:	8f 5f       	subi	r24, 0xFF	; 255
	if (smallTimer > 37)					//This if is entered once every second
 174:	86 32       	cpi	r24, 0x26	; 38
 176:	18 f4       	brcc	.+6      	; 0x17e <__vector_3+0x1c>

ISR (TIM0_OVF_vect)							//Timer 0 overflow interrupt used for all the timing needs. The prescalre is set to CLOCK/256. This ISR is called approximately 122 times a second
{
	static uint8_t smallTimer = 0;			//The small timer is incremented 122 times to make up one second
	
	smallTimer++;
 178:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__vector_3+0x20>
	if (smallTimer > 37)					//This if is entered once every second
	{
		smallTimer = 0;
 17e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		//if (OCR0A > 32) OCR0A--;			//OCR0A is decremented twice a second when the chip is not sleeping
		//DDRB ^= 1 << PINB0;				//Debugging
	}
}
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_8>:

ISR (WDT_vect)									//WDT interrupt to wake from sleep and check brightness once every 8sec
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
	static uint8_t lightTimes = 20;				//How many times light has been detected
	
	WDTCR |= (1<<WDTIE);						//The watchdog timer interrupt enable bit should be written to 1 every time the watchdog ISR executes. If a watchdog timer overflow occurs and this bit is not set, the chip will reset
 19a:	81 b5       	in	r24, 0x21	; 33
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	81 bd       	out	0x21, r24	; 33
	//DDRB ^= 1 << PINB0;	//Debugging
	
	if (OCR0A) return;							//If the light is on, no commands are executed and the routine returns
 1a0:	86 b7       	in	r24, 0x36	; 54
 1a2:	81 11       	cpse	r24, r1
 1a4:	13 c0       	rjmp	.+38     	; 0x1cc <__vector_8+0x3e>
 	
	
	if (PINB & (1 << PINB2))					//If the photoresistor detects light
 1a6:	b2 9b       	sbis	0x16, 2	; 22
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <__vector_8+0x2c>
	{
		if (lightTimes < 20) lightTimes++;		//The lightTimes is incremented until it reaches 10
 1aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	84 31       	cpi	r24, 0x14	; 20
 1b0:	68 f4       	brcc	.+26     	; 0x1cc <__vector_8+0x3e>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <__vector_8+0x3e>
	}
	else if (lightTimes >= 20)					//If the photoresistor does not detect light and there have already been 10 instances of light
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	84 31       	cpi	r24, 0x14	; 20
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <__vector_8+0x3e>
	{
		lightTimes = 0;							//The lightTimes is set to 0 so that the light will not keep turning on when in the dark
 1c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		toRampUp = 1;							//light is to be ramped up at half intensity that will slowly ramp down after 60" (dedicated to my white wolf)
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <toRampUp>
	}
}
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_2>:

ISR (PCINT0_vect)								//Pin change interrupt used to read the tilt sensor, wake from sleep and extend ON time
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
	GIMSK |= 1 << PCIE;			//Set pin change interrupt enable bit
}

inline void clPCI()				//Disables pin change interrupt
{
	GIMSK &= ~(1 << PCIE);		//Clear pin change interrupt enable bit
 1e4:	8b b7       	in	r24, 0x3b	; 59
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	8b bf       	out	0x3b, r24	; 59
}

ISR (PCINT0_vect)								//Pin change interrupt used to read the tilt sensor, wake from sleep and extend ON time
{
	clPCI();									//When the pin change ISR is called, it disables itself with this command. It is then re-enabled in various locations in the code
	toRampUp = 1;								//Every time the tilt sensor is triggered, the ON time is extended to the maximum (60" chosen as default)
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <toRampUp>
}
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
